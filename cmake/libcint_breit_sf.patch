diff --git a/CMakeLists.txt b/CMakeLists.txt
index db74f84..5252922 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -75,7 +75,7 @@ set(cintSrc
   src/fblas.c src/g1e.c src/g2e.c src/misc.c src/optimizer.c
   src/fmt.c src/rys_wheeler.c src/eigh.c src/rys_roots.c
   src/cint2c2e.c src/g2c2e.c src/cint3c2e.c src/g3c2e.c
-  src/cint3c1e.c src/g3c1e.c src/breit.c
+  src/cint3c1e.c src/g3c1e.c src/breit.c src/breit_sf.c
   src/cint1e_a.c src/cint3c1e_a.c
   src/cint1e_grids.c src/g1e_grids.c
   src/autocode/breit1.c src/autocode/dkb.c src/autocode/gaunt1.c
diff --git a/src/breit_sf.c b/src/breit_sf.c
new file mode 100644
index 0000000..4a4eaa1
--- /dev/null
+++ b/src/breit_sf.c
@@ -0,0 +1,1242 @@
+#include <stdlib.h>
+#include <stdio.h>
+#include "cint_bas.h"
+#include "cart2sph.h"
+#include "g1e.h"
+#include "g1e_grids.h"
+#include "g2e.h"
+#include "optimizer.h"
+#include "cint1e.h"
+#include "cint2e.h"
+#include "misc.h"
+#include "c2f.h"
+
+/*
+ * spin-free gaunt integrals
+ */
+void CINTgout2e_int2e_gaunt_sp1sp2(double *gout,
+                                   double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        G2E_D_L(g1, g0, envs->i_l+0, envs->j_l+1, envs->k_l+0, envs->l_l+0);
+        G2E_D_J(g3, g1, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0 = 0;
+                double s4 = 0;
+                double s8 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g3[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g0[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g0[ix+i] * g0[iy+i] * g3[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n] = + s0 + s4 + s8;
+                } else {
+                        gout[n] += + s0 + s4 + s8;
+                }}}
+void int2e_gaunt_sp1sp2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {0, 1, 0, 1, 2, 1, 1, 1};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gaunt_sp1sp2_cart(double *out, int *dims, int *shls,
+                                     int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {0, 1, 0, 1, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_sp1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gaunt_sp1sp2_sph(double *out, int *dims, int *shls,
+                                    int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {0, 1, 0, 1, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_sp1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gaunt_sp1sp2_spinor(double complex *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {0, 1, 0, 1, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_sp1sp2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gaunt_sp1sp2);
+
+void CINTgout2e_int2e_gaunt_sp1ps2(double *gout,
+                                   double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        G2E_D_K(g1, g0, envs->i_l+0, envs->j_l+1, envs->k_l+0, envs->l_l);
+        G2E_D_J(g3, g1, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0 = 0;
+                double s4 = 0;
+                double s8 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g3[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g0[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g0[ix+i] * g0[iy+i] * g3[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n] = - s0 - s4 - s8;
+                } else {
+                        gout[n] += - s0 - s4 - s8;
+                }}}
+void int2e_gaunt_sp1ps2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {0, 1, 1, 0, 2, 1, 1, 1};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gaunt_sp1ps2_cart(double *out, int *dims, int *shls,
+                                     int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {0, 1, 1, 0, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_sp1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gaunt_sp1ps2_sph(double *out, int *dims, int *shls,
+                                    int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {0, 1, 1, 0, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_sp1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gaunt_sp1ps2_spinor(double complex *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {0, 1, 1, 0, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_sp1ps2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gaunt_sp1ps2);
+
+void CINTgout2e_int2e_gaunt_ps1sp2(double *gout,
+                                   double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        G2E_D_L(g1, g0, envs->i_l+1, envs->j_l+0, envs->k_l+0, envs->l_l+0);
+        G2E_D_I(g3, g1, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0 = 0;
+                double s4 = 0;
+                double s8 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g3[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g0[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g0[ix+i] * g0[iy+i] * g3[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n] = - s0 - s4 - s8;
+                } else {
+                        gout[n] += - s0 - s4 - s8;
+                }}}
+void int2e_gaunt_ps1sp2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {1, 0, 0, 1, 2, 1, 1, 1};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gaunt_ps1sp2_cart(double *out, int *dims, int *shls,
+                                     int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 0, 0, 1, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_ps1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gaunt_ps1sp2_sph(double *out, int *dims, int *shls,
+                                    int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 0, 0, 1, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_ps1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gaunt_ps1sp2_spinor(double complex *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 0, 0, 1, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_ps1sp2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gaunt_ps1sp2);
+
+void CINTgout2e_int2e_gaunt_ps1ps2(double *gout,
+                                   double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        G2E_D_K(g1, g0, envs->i_l+1, envs->j_l+0, envs->k_l+0, envs->l_l);
+        G2E_D_I(g3, g1, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0 = 0;
+                double s4 = 0;
+                double s8 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g3[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g0[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g0[ix+i] * g0[iy+i] * g3[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n] = + s0 + s4 + s8;
+                } else {
+                        gout[n] += + s0 + s4 + s8;
+                }}}
+void int2e_gaunt_ps1ps2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {1, 0, 1, 0, 2, 1, 1, 1};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gaunt_ps1ps2_cart(double *out, int *dims, int *shls,
+                                     int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 0, 1, 0, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_ps1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gaunt_ps1ps2_sph(double *out, int *dims, int *shls,
+                                    int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 0, 1, 0, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_ps1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gaunt_ps1ps2_spinor(double complex *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 0, 1, 0, 2, 1, 1, 1};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gaunt_ps1ps2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gaunt_ps1ps2);
+
+/*
+ * spin-free gauge integrals
+ */
+void CINTgout2e_int2e_gauge_r1_sp1sp2(double *gout,
+                                      double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        double *g4 = g3 + envs->g_size * 3;
+        double *g5 = g4 + envs->g_size * 3;
+        double *g6 = g5 + envs->g_size * 3;
+        double *g7 = g6 + envs->g_size * 3;
+        double *g8 = g7 + envs->g_size * 3;
+        double *g9 = g8 + envs->g_size * 3;
+        double *g10 = g9 + envs->g_size * 3;
+        double *g11 = g10 + envs->g_size * 3;
+        double *g12 = g11 + envs->g_size * 3;
+        double *g13 = g12 + envs->g_size * 3;
+        double *g14 = g13 + envs->g_size * 3;
+        double *g15 = g14 + envs->g_size * 3;
+        G2E_D_L(g1, g0, envs->i_l+1, envs->j_l+3, envs->k_l+0, envs->l_l+0);
+        G2E_D_J(g3, g1, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_R0J(g4, g0, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l);
+        G2E_R0J(g5, g1, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l);
+        G2E_D_J(g6, g4, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_J(g8, g0, envs->i_l+0, envs->j_l+2, envs->k_l, envs->l_l); G2E_D_I(g9, g0, envs->i_l+0, envs->j_l+2, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g8[ix] += g9[ix];}
+        G2E_D_J(g9, g1, envs->i_l+0, envs->j_l+2, envs->k_l, envs->l_l); G2E_D_I(g10, g1, envs->i_l+0, envs->j_l+2, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g9[ix] += g10[ix];}
+        G2E_D_J(g10, g8, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_R0J(g12, g8, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l);
+        G2E_R0J(g13, g9, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l);
+        G2E_D_J(g15, g13, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0  = 0;
+                double s4  = 0;
+                double s8  = 0;
+                double s10 = 0;
+                double s12 = 0;
+                double s20 = 0;
+                double s24 = 0;
+                double s28 = 0;
+                double s30 = 0;
+                double s36 = 0;
+                double s40 = 0;
+                double s44 = 0;
+                double s50 = 0;
+                double s52 = 0;
+                double s56 = 0;
+                double s60 = 0;
+                double s68 = 0;
+                double s70 = 0;
+                double s72 = 0;
+                double s76 = 0;
+                double s80 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g15[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g12[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g12[ix+i] * g0[iy+i] * g3[iz+i];
+                        s10 += g10[ix+i] * g5[iy+i] * g0[iz+i];
+                        s12 += g9[ix+i] * g6[iy+i] * g0[iz+i];
+                        s20 += g10[ix+i] * g0[iy+i] * g5[iz+i];
+                        s24 += g9[ix+i] * g0[iy+i] * g6[iz+i];
+                        s28 += g6[ix+i] * g9[iy+i] * g0[iz+i];
+                        s30 += g5[ix+i] * g10[iy+i] * g0[iz+i];
+                        s36 += g3[ix+i] * g12[iy+i] * g0[iz+i];
+                        s40 += g0[ix+i] * g15[iy+i] * g0[iz+i];
+                        s44 += g0[ix+i] * g12[iy+i] * g3[iz+i];
+                        s50 += g0[ix+i] * g10[iy+i] * g5[iz+i];
+                        s52 += g0[ix+i] * g9[iy+i] * g6[iz+i];
+                        s56 += g6[ix+i] * g0[iy+i] * g9[iz+i];
+                        s60 += g5[ix+i] * g0[iy+i] * g10[iz+i];
+                        s68 += g0[ix+i] * g6[iy+i] * g9[iz+i];
+                        s70 += g0[ix+i] * g5[iy+i] * g10[iz+i];
+                        s72 += g3[ix+i] * g0[iy+i] * g12[iz+i];
+                        s76 += g0[ix+i] * g3[iy+i] * g12[iz+i];
+                        s80 += g0[ix+i] * g0[iy+i] * g15[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n*4  ] = + s44 - s68 - s52 + s76;
+                        gout[n*4+1] = - s56 + s8 + s72 - s24;
+                        gout[n*4+2] = + s4 - s28 - s12 + s36;
+                        gout[n*4+3] = + s0 + s30 + s60 + s10 + s40 + s70 + s20 + s50 + s80;
+                } else {
+                        gout[n*4  ] += + s44 - s68 - s52 + s76;
+                        gout[n*4+1] += - s56 + s8 + s72 - s24;
+                        gout[n*4+2] += + s4 - s28 - s12 + s36;
+                        gout[n*4+3] += + s0 + s30 + s60 + s10 + s40 + s70 + s20 + s50 + s80;
+                }}}
+void int2e_gauge_r1_sp1sp2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {1, 3, 0, 1, 4, 1, 1, 4};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gauge_r1_sp1sp2_cart(double *out, int *dims, int *shls,
+                                        int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 3, 0, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_sp1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r1_sp1sp2_sph(double *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 3, 0, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_sp1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r1_sp1sp2_spinor(double complex *out, int *dims, int *shls,
+                                          int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 3, 0, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_sp1sp2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gauge_r1_sp1sp2);
+
+void CINTgout2e_int2e_gauge_r1_sp1ps2(double *gout,
+                                      double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        double *g4 = g3 + envs->g_size * 3;
+        double *g5 = g4 + envs->g_size * 3;
+        double *g6 = g5 + envs->g_size * 3;
+        double *g7 = g6 + envs->g_size * 3;
+        double *g8 = g7 + envs->g_size * 3;
+        double *g9 = g8 + envs->g_size * 3;
+        double *g10 = g9 + envs->g_size * 3;
+        double *g11 = g10 + envs->g_size * 3;
+        double *g12 = g11 + envs->g_size * 3;
+        double *g13 = g12 + envs->g_size * 3;
+        double *g14 = g13 + envs->g_size * 3;
+        double *g15 = g14 + envs->g_size * 3;
+        G2E_D_K(g1, g0, envs->i_l+1, envs->j_l+3, envs->k_l+0, envs->l_l);
+        G2E_D_J(g3, g1, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_R0J(g4, g0, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l);
+        G2E_R0J(g5, g1, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l);
+        G2E_D_J(g6, g4, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_J(g8, g0, envs->i_l+0, envs->j_l+2, envs->k_l, envs->l_l); G2E_D_I(g9, g0, envs->i_l+0, envs->j_l+2, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g8[ix] += g9[ix];}
+        G2E_D_J(g9, g1, envs->i_l+0, envs->j_l+2, envs->k_l, envs->l_l); G2E_D_I(g10, g1, envs->i_l+0, envs->j_l+2, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g9[ix] += g10[ix];}
+        G2E_D_J(g10, g8, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_R0J(g12, g8, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l);
+        G2E_R0J(g13, g9, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l);
+        G2E_D_J(g15, g13, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0  = 0;
+                double s4  = 0;
+                double s8  = 0;
+                double s10 = 0;
+                double s12 = 0;
+                double s20 = 0;
+                double s24 = 0;
+                double s28 = 0;
+                double s30 = 0;
+                double s36 = 0;
+                double s40 = 0;
+                double s44 = 0;
+                double s50 = 0;
+                double s52 = 0;
+                double s56 = 0;
+                double s60 = 0;
+                double s68 = 0;
+                double s70 = 0;
+                double s72 = 0;
+                double s76 = 0;
+                double s80 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g15[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g12[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g12[ix+i] * g0[iy+i] * g3[iz+i];
+                        s10 += g10[ix+i] * g5[iy+i] * g0[iz+i];
+                        s12 += g9[ix+i] * g6[iy+i] * g0[iz+i];
+                        s20 += g10[ix+i] * g0[iy+i] * g5[iz+i];
+                        s24 += g9[ix+i] * g0[iy+i] * g6[iz+i];
+                        s28 += g6[ix+i] * g9[iy+i] * g0[iz+i];
+                        s30 += g5[ix+i] * g10[iy+i] * g0[iz+i];
+                        s36 += g3[ix+i] * g12[iy+i] * g0[iz+i];
+                        s40 += g0[ix+i] * g15[iy+i] * g0[iz+i];
+                        s44 += g0[ix+i] * g12[iy+i] * g3[iz+i];
+                        s50 += g0[ix+i] * g10[iy+i] * g5[iz+i];
+                        s52 += g0[ix+i] * g9[iy+i] * g6[iz+i];
+                        s56 += g6[ix+i] * g0[iy+i] * g9[iz+i];
+                        s60 += g5[ix+i] * g0[iy+i] * g10[iz+i];
+                        s68 += g0[ix+i] * g6[iy+i] * g9[iz+i];
+                        s70 += g0[ix+i] * g5[iy+i] * g10[iz+i];
+                        s72 += g3[ix+i] * g0[iy+i] * g12[iz+i];
+                        s76 += g0[ix+i] * g3[iy+i] * g12[iz+i];
+                        s80 += g0[ix+i] * g0[iy+i] * g15[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n*4  ] = + s44 - s68 - s52 + s76;
+                        gout[n*4+1] = - s56 + s8 + s72 - s24;
+                        gout[n*4+2] = + s4 - s28 - s12 + s36;
+                        gout[n*4+3] = - s0 - s30 - s60 - s10 - s40 - s70 - s20 - s50 - s80;
+                } else {
+                        gout[n*4  ] += + s44 - s68 - s52 + s76;
+                        gout[n*4+1] += - s56 + s8 + s72 - s24;
+                        gout[n*4+2] += + s4 - s28 - s12 + s36;
+                        gout[n*4+3] += - s0 - s30 - s60 - s10 - s40 - s70 - s20 - s50 - s80;
+                }}}
+void int2e_gauge_r1_sp1ps2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {1, 3, 1, 0, 4, 1, 1, 4};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gauge_r1_sp1ps2_cart(double *out, int *dims, int *shls,
+                                        int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 3, 1, 0, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_sp1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r1_sp1ps2_sph(double *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 3, 1, 0, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_sp1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r1_sp1ps2_spinor(double complex *out, int *dims, int *shls,
+                                          int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 3, 1, 0, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_sp1ps2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gauge_r1_sp1ps2);
+
+void CINTgout2e_int2e_gauge_r1_ps1sp2(double *gout,
+                                      double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        double *g4 = g3 + envs->g_size * 3;
+        double *g5 = g4 + envs->g_size * 3;
+        double *g6 = g5 + envs->g_size * 3;
+        double *g7 = g6 + envs->g_size * 3;
+        double *g8 = g7 + envs->g_size * 3;
+        double *g9 = g8 + envs->g_size * 3;
+        double *g10 = g9 + envs->g_size * 3;
+        double *g11 = g10 + envs->g_size * 3;
+        double *g12 = g11 + envs->g_size * 3;
+        double *g13 = g12 + envs->g_size * 3;
+        double *g14 = g13 + envs->g_size * 3;
+        double *g15 = g14 + envs->g_size * 3;
+        G2E_D_L(g1, g0, envs->i_l+2, envs->j_l+2, envs->k_l+0, envs->l_l+0);
+        G2E_R0J(g2, g0, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_R0J(g3, g1, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_J(g4, g0, envs->i_l+1, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g5, g0, envs->i_l+1, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g4[ix] += g5[ix];}
+        G2E_D_J(g5, g1, envs->i_l+1, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g6, g1, envs->i_l+1, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g5[ix] += g6[ix];}
+        G2E_R0J(g6, g4, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_R0J(g7, g5, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_I(g9, g1, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g10, g2, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g12, g4, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g15, g7, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0  = 0;
+                double s4  = 0;
+                double s8  = 0;
+                double s10 = 0;
+                double s12 = 0;
+                double s20 = 0;
+                double s24 = 0;
+                double s28 = 0;
+                double s30 = 0;
+                double s36 = 0;
+                double s40 = 0;
+                double s44 = 0;
+                double s50 = 0;
+                double s52 = 0;
+                double s56 = 0;
+                double s60 = 0;
+                double s68 = 0;
+                double s70 = 0;
+                double s72 = 0;
+                double s76 = 0;
+                double s80 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g15[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g12[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g12[ix+i] * g0[iy+i] * g3[iz+i];
+                        s10 += g10[ix+i] * g5[iy+i] * g0[iz+i];
+                        s12 += g9[ix+i] * g6[iy+i] * g0[iz+i];
+                        s20 += g10[ix+i] * g0[iy+i] * g5[iz+i];
+                        s24 += g9[ix+i] * g0[iy+i] * g6[iz+i];
+                        s28 += g6[ix+i] * g9[iy+i] * g0[iz+i];
+                        s30 += g5[ix+i] * g10[iy+i] * g0[iz+i];
+                        s36 += g3[ix+i] * g12[iy+i] * g0[iz+i];
+                        s40 += g0[ix+i] * g15[iy+i] * g0[iz+i];
+                        s44 += g0[ix+i] * g12[iy+i] * g3[iz+i];
+                        s50 += g0[ix+i] * g10[iy+i] * g5[iz+i];
+                        s52 += g0[ix+i] * g9[iy+i] * g6[iz+i];
+                        s56 += g6[ix+i] * g0[iy+i] * g9[iz+i];
+                        s60 += g5[ix+i] * g0[iy+i] * g10[iz+i];
+                        s68 += g0[ix+i] * g6[iy+i] * g9[iz+i];
+                        s70 += g0[ix+i] * g5[iy+i] * g10[iz+i];
+                        s72 += g3[ix+i] * g0[iy+i] * g12[iz+i];
+                        s76 += g0[ix+i] * g3[iy+i] * g12[iz+i];
+                        s80 += g0[ix+i] * g0[iy+i] * g15[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n*4  ] = - s50 + s68 + s52 - s70;
+                        gout[n*4+1] = + s56 - s20 - s60 + s24;
+                        gout[n*4+2] = - s10 + s28 + s12 - s30;
+                        gout[n*4+3] = - s0 - s36 - s72 - s4 - s40 - s76 - s8 - s44 - s80;
+                } else {
+                        gout[n*4  ] += - s50 + s68 + s52 - s70;
+                        gout[n*4+1] += + s56 - s20 - s60 + s24;
+                        gout[n*4+2] += - s10 + s28 + s12 - s30;
+                        gout[n*4+3] += - s0 - s36 - s72 - s4 - s40 - s76 - s8 - s44 - s80;
+                }}}
+void int2e_gauge_r1_ps1sp2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {2, 2, 0, 1, 4, 1, 1, 4};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gauge_r1_ps1sp2_cart(double *out, int *dims, int *shls,
+                                        int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 2, 0, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_ps1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r1_ps1sp2_sph(double *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 2, 0, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_ps1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r1_ps1sp2_spinor(double complex *out, int *dims, int *shls,
+                                          int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 2, 0, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_ps1sp2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gauge_r1_ps1sp2);
+
+void CINTgout2e_int2e_gauge_r1_ps1ps2(double *gout,
+                                      double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        double *g4 = g3 + envs->g_size * 3;
+        double *g5 = g4 + envs->g_size * 3;
+        double *g6 = g5 + envs->g_size * 3;
+        double *g7 = g6 + envs->g_size * 3;
+        double *g8 = g7 + envs->g_size * 3;
+        double *g9 = g8 + envs->g_size * 3;
+        double *g10 = g9 + envs->g_size * 3;
+        double *g11 = g10 + envs->g_size * 3;
+        double *g12 = g11 + envs->g_size * 3;
+        double *g13 = g12 + envs->g_size * 3;
+        double *g14 = g13 + envs->g_size * 3;
+        double *g15 = g14 + envs->g_size * 3;
+        G2E_D_K(g1, g0, envs->i_l+2, envs->j_l+2, envs->k_l+0, envs->l_l);
+        G2E_R0J(g2, g0, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_R0J(g3, g1, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_J(g4, g0, envs->i_l+1, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g5, g0, envs->i_l+1, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g4[ix] += g5[ix];}
+        G2E_D_J(g5, g1, envs->i_l+1, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g6, g1, envs->i_l+1, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g5[ix] += g6[ix];}
+        G2E_R0J(g6, g4, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_R0J(g7, g5, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_I(g9, g1, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g10, g2, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g12, g4, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g15, g7, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0  = 0;
+                double s4  = 0;
+                double s8  = 0;
+                double s10 = 0;
+                double s12 = 0;
+                double s20 = 0;
+                double s24 = 0;
+                double s28 = 0;
+                double s30 = 0;
+                double s36 = 0;
+                double s40 = 0;
+                double s44 = 0;
+                double s50 = 0;
+                double s52 = 0;
+                double s56 = 0;
+                double s60 = 0;
+                double s68 = 0;
+                double s70 = 0;
+                double s72 = 0;
+                double s76 = 0;
+                double s80 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g15[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g12[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g12[ix+i] * g0[iy+i] * g3[iz+i];
+                        s10 += g10[ix+i] * g5[iy+i] * g0[iz+i];
+                        s12 += g9[ix+i] * g6[iy+i] * g0[iz+i];
+                        s20 += g10[ix+i] * g0[iy+i] * g5[iz+i];
+                        s24 += g9[ix+i] * g0[iy+i] * g6[iz+i];
+                        s28 += g6[ix+i] * g9[iy+i] * g0[iz+i];
+                        s30 += g5[ix+i] * g10[iy+i] * g0[iz+i];
+                        s36 += g3[ix+i] * g12[iy+i] * g0[iz+i];
+                        s40 += g0[ix+i] * g15[iy+i] * g0[iz+i];
+                        s44 += g0[ix+i] * g12[iy+i] * g3[iz+i];
+                        s50 += g0[ix+i] * g10[iy+i] * g5[iz+i];
+                        s52 += g0[ix+i] * g9[iy+i] * g6[iz+i];
+                        s56 += g6[ix+i] * g0[iy+i] * g9[iz+i];
+                        s60 += g5[ix+i] * g0[iy+i] * g10[iz+i];
+                        s68 += g0[ix+i] * g6[iy+i] * g9[iz+i];
+                        s70 += g0[ix+i] * g5[iy+i] * g10[iz+i];
+                        s72 += g3[ix+i] * g0[iy+i] * g12[iz+i];
+                        s76 += g0[ix+i] * g3[iy+i] * g12[iz+i];
+                        s80 += g0[ix+i] * g0[iy+i] * g15[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n*4  ] = - s50 + s68 + s52 - s70;
+                        gout[n*4+1] = + s56 - s20 - s60 + s24;
+                        gout[n*4+2] = - s10 + s28 + s12 - s30;
+                        gout[n*4+3] = + s0 + s36 + s72 + s4 + s40 + s76 + s8 + s44 + s80;
+                } else {
+                        gout[n*4  ] += - s50 + s68 + s52 - s70;
+                        gout[n*4+1] += + s56 - s20 - s60 + s24;
+                        gout[n*4+2] += - s10 + s28 + s12 - s30;
+                        gout[n*4+3] += + s0 + s36 + s72 + s4 + s40 + s76 + s8 + s44 + s80;
+                }}}
+void int2e_gauge_r1_ps1ps2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {2, 2, 1, 0, 4, 1, 1, 4};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gauge_r1_ps1ps2_cart(double *out, int *dims, int *shls,
+                                        int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 2, 1, 0, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_ps1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r1_ps1ps2_sph(double *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 2, 1, 0, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_ps1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r1_ps1ps2_spinor(double complex *out, int *dims, int *shls,
+                                          int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 2, 1, 0, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r1_ps1ps2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gauge_r1_ps1ps2);
+
+void CINTgout2e_int2e_gauge_r2_sp1sp2(double *gout,
+                                      double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        double *g4 = g3 + envs->g_size * 3;
+        double *g5 = g4 + envs->g_size * 3;
+        double *g6 = g5 + envs->g_size * 3;
+        double *g7 = g6 + envs->g_size * 3;
+        double *g8 = g7 + envs->g_size * 3;
+        double *g9 = g8 + envs->g_size * 3;
+        double *g10 = g9 + envs->g_size * 3;
+        double *g11 = g10 + envs->g_size * 3;
+        double *g12 = g11 + envs->g_size * 3;
+        double *g13 = g12 + envs->g_size * 3;
+        double *g14 = g13 + envs->g_size * 3;
+        double *g15 = g14 + envs->g_size * 3;
+        G2E_D_L(g1, g0, envs->i_l+1, envs->j_l+2, envs->k_l+0, envs->l_l+0);
+        G2E_R0L(g2, g0, envs->i_l+1, envs->j_l+2, envs->k_l+0, envs->l_l+1);
+        G2E_D_L(g3, g2, envs->i_l+1, envs->j_l+2, envs->k_l+0, envs->l_l+0);
+        G2E_D_J(g5, g1, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_J(g6, g2, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_J(g8, g0, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g9, g0, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g8[ix] += g9[ix];}
+        G2E_D_J(g9, g1, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g10, g1, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g9[ix] += g10[ix];}
+        G2E_D_J(g10, g2, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g11, g2, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g10[ix] += g11[ix];}
+        G2E_D_J(g11, g3, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g12, g3, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g11[ix] += g12[ix];}
+        G2E_D_J(g12, g8, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_J(g15, g11, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0  = 0;
+                double s4  = 0;
+                double s8  = 0;
+                double s10 = 0;
+                double s12 = 0;
+                double s20 = 0;
+                double s24 = 0;
+                double s28 = 0;
+                double s30 = 0;
+                double s36 = 0;
+                double s40 = 0;
+                double s44 = 0;
+                double s50 = 0;
+                double s52 = 0;
+                double s56 = 0;
+                double s60 = 0;
+                double s68 = 0;
+                double s70 = 0;
+                double s72 = 0;
+                double s76 = 0;
+                double s80 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g15[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g12[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g12[ix+i] * g0[iy+i] * g3[iz+i];
+                        s10 += g10[ix+i] * g5[iy+i] * g0[iz+i];
+                        s12 += g9[ix+i] * g6[iy+i] * g0[iz+i];
+                        s20 += g10[ix+i] * g0[iy+i] * g5[iz+i];
+                        s24 += g9[ix+i] * g0[iy+i] * g6[iz+i];
+                        s28 += g6[ix+i] * g9[iy+i] * g0[iz+i];
+                        s30 += g5[ix+i] * g10[iy+i] * g0[iz+i];
+                        s36 += g3[ix+i] * g12[iy+i] * g0[iz+i];
+                        s40 += g0[ix+i] * g15[iy+i] * g0[iz+i];
+                        s44 += g0[ix+i] * g12[iy+i] * g3[iz+i];
+                        s50 += g0[ix+i] * g10[iy+i] * g5[iz+i];
+                        s52 += g0[ix+i] * g9[iy+i] * g6[iz+i];
+                        s56 += g6[ix+i] * g0[iy+i] * g9[iz+i];
+                        s60 += g5[ix+i] * g0[iy+i] * g10[iz+i];
+                        s68 += g0[ix+i] * g6[iy+i] * g9[iz+i];
+                        s70 += g0[ix+i] * g5[iy+i] * g10[iz+i];
+                        s72 += g3[ix+i] * g0[iy+i] * g12[iz+i];
+                        s76 += g0[ix+i] * g3[iy+i] * g12[iz+i];
+                        s80 += g0[ix+i] * g0[iy+i] * g15[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n*4  ] = + s50 - s68 - s52 + s70;
+                        gout[n*4+1] = + s60 - s24 - s56 + s20;
+                        gout[n*4+2] = + s10 - s28 - s12 + s30;
+                        gout[n*4+3] = + s0 + s36 + s72 + s4 + s40 + s76 + s8 + s44 + s80;
+                } else {
+                        gout[n*4  ] += + s50 - s68 - s52 + s70;
+                        gout[n*4+1] += + s60 - s24 - s56 + s20;
+                        gout[n*4+2] += + s10 - s28 - s12 + s30;
+                        gout[n*4+3] += + s0 + s36 + s72 + s4 + s40 + s76 + s8 + s44 + s80;
+                }}}
+void int2e_gauge_r2_sp1sp2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {1, 2, 0, 2, 4, 1, 1, 4};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gauge_r2_sp1sp2_cart(double *out, int *dims, int *shls,
+                                        int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 2, 0, 2, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_sp1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r2_sp1sp2_sph(double *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 2, 0, 2, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_sp1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r2_sp1sp2_spinor(double complex *out, int *dims, int *shls,
+                                          int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 2, 0, 2, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_sp1sp2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gauge_r2_sp1sp2);
+
+void CINTgout2e_int2e_gauge_r2_sp1ps2(double *gout,
+                                      double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        double *g4 = g3 + envs->g_size * 3;
+        double *g5 = g4 + envs->g_size * 3;
+        double *g6 = g5 + envs->g_size * 3;
+        double *g7 = g6 + envs->g_size * 3;
+        double *g8 = g7 + envs->g_size * 3;
+        double *g9 = g8 + envs->g_size * 3;
+        double *g10 = g9 + envs->g_size * 3;
+        double *g11 = g10 + envs->g_size * 3;
+        double *g12 = g11 + envs->g_size * 3;
+        double *g13 = g12 + envs->g_size * 3;
+        double *g14 = g13 + envs->g_size * 3;
+        double *g15 = g14 + envs->g_size * 3;
+        G2E_R0L(g1, g0, envs->i_l+1, envs->j_l+2, envs->k_l+1, envs->l_l+0);
+        G2E_D_K(g2, g0, envs->i_l+1, envs->j_l+2, envs->k_l+0, envs->l_l);
+        G2E_D_K(g3, g1, envs->i_l+1, envs->j_l+2, envs->k_l+0, envs->l_l);
+        G2E_D_J(g5, g1, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_J(g6, g2, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_J(g8, g0, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g9, g0, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g8[ix] += g9[ix];}
+        G2E_D_J(g9, g1, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g10, g1, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g9[ix] += g10[ix];}
+        G2E_D_J(g10, g2, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g11, g2, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g10[ix] += g11[ix];}
+        G2E_D_J(g11, g3, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); G2E_D_I(g12, g3, envs->i_l+0, envs->j_l+1, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g11[ix] += g12[ix];}
+        G2E_D_J(g12, g8, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        G2E_D_J(g15, g11, envs->i_l+0, envs->j_l+0, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0  = 0;
+                double s4  = 0;
+                double s8  = 0;
+                double s10 = 0;
+                double s12 = 0;
+                double s20 = 0;
+                double s24 = 0;
+                double s28 = 0;
+                double s30 = 0;
+                double s36 = 0;
+                double s40 = 0;
+                double s44 = 0;
+                double s50 = 0;
+                double s52 = 0;
+                double s56 = 0;
+                double s60 = 0;
+                double s68 = 0;
+                double s70 = 0;
+                double s72 = 0;
+                double s76 = 0;
+                double s80 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g15[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g12[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g12[ix+i] * g0[iy+i] * g3[iz+i];
+                        s10 += g10[ix+i] * g5[iy+i] * g0[iz+i];
+                        s12 += g9[ix+i] * g6[iy+i] * g0[iz+i];
+                        s20 += g10[ix+i] * g0[iy+i] * g5[iz+i];
+                        s24 += g9[ix+i] * g0[iy+i] * g6[iz+i];
+                        s28 += g6[ix+i] * g9[iy+i] * g0[iz+i];
+                        s30 += g5[ix+i] * g10[iy+i] * g0[iz+i];
+                        s36 += g3[ix+i] * g12[iy+i] * g0[iz+i];
+                        s40 += g0[ix+i] * g15[iy+i] * g0[iz+i];
+                        s44 += g0[ix+i] * g12[iy+i] * g3[iz+i];
+                        s50 += g0[ix+i] * g10[iy+i] * g5[iz+i];
+                        s52 += g0[ix+i] * g9[iy+i] * g6[iz+i];
+                        s56 += g6[ix+i] * g0[iy+i] * g9[iz+i];
+                        s60 += g5[ix+i] * g0[iy+i] * g10[iz+i];
+                        s68 += g0[ix+i] * g6[iy+i] * g9[iz+i];
+                        s70 += g0[ix+i] * g5[iy+i] * g10[iz+i];
+                        s72 += g3[ix+i] * g0[iy+i] * g12[iz+i];
+                        s76 += g0[ix+i] * g3[iy+i] * g12[iz+i];
+                        s80 += g0[ix+i] * g0[iy+i] * g15[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n*4  ] = - s50 + s68 + s52 - s70;
+                        gout[n*4+1] = - s60 + s24 + s56 - s20;
+                        gout[n*4+2] = - s10 + s28 + s12 - s30;
+                        gout[n*4+3] = - s0 - s36 - s72 - s4 - s40 - s76 - s8 - s44 - s80;
+                } else {
+                        gout[n*4  ] += - s50 + s68 + s52 - s70;
+                        gout[n*4+1] += - s60 + s24 + s56 - s20;
+                        gout[n*4+2] += - s10 + s28 + s12 - s30;
+                        gout[n*4+3] += - s0 - s36 - s72 - s4 - s40 - s76 - s8 - s44 - s80;
+                }}}
+void int2e_gauge_r2_sp1ps2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {1, 2, 1, 1, 4, 1, 1, 4};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gauge_r2_sp1ps2_cart(double *out, int *dims, int *shls,
+                                        int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 2, 1, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_sp1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r2_sp1ps2_sph(double *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 2, 1, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_sp1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r2_sp1ps2_spinor(double complex *out, int *dims, int *shls,
+                                          int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {1, 2, 1, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_sp1ps2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gauge_r2_sp1ps2);
+
+void CINTgout2e_int2e_gauge_r2_ps1sp2(double *gout,
+                                      double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        double *g4 = g3 + envs->g_size * 3;
+        double *g5 = g4 + envs->g_size * 3;
+        double *g6 = g5 + envs->g_size * 3;
+        double *g7 = g6 + envs->g_size * 3;
+        double *g8 = g7 + envs->g_size * 3;
+        double *g9 = g8 + envs->g_size * 3;
+        double *g10 = g9 + envs->g_size * 3;
+        double *g11 = g10 + envs->g_size * 3;
+        double *g12 = g11 + envs->g_size * 3;
+        double *g13 = g12 + envs->g_size * 3;
+        double *g14 = g13 + envs->g_size * 3;
+        double *g15 = g14 + envs->g_size * 3;
+        G2E_D_L(g1, g0, envs->i_l+2, envs->j_l+1, envs->k_l+0, envs->l_l+0);
+        G2E_R0L(g2, g0, envs->i_l+2, envs->j_l+1, envs->k_l+0, envs->l_l+1);
+        G2E_D_L(g3, g2, envs->i_l+2, envs->j_l+1, envs->k_l+0, envs->l_l+0);
+        G2E_D_J(g4, g0, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); G2E_D_I(g5, g0, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g4[ix] += g5[ix];}
+        G2E_D_J(g5, g1, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); G2E_D_I(g6, g1, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g5[ix] += g6[ix];}
+        G2E_D_J(g6, g2, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); G2E_D_I(g7, g2, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g6[ix] += g7[ix];}
+        G2E_D_J(g7, g3, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); G2E_D_I(g8, g3, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g7[ix] += g8[ix];}
+        G2E_D_I(g9, g1, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g10, g2, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g12, g4, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g15, g7, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0  = 0;
+                double s4  = 0;
+                double s8  = 0;
+                double s10 = 0;
+                double s12 = 0;
+                double s20 = 0;
+                double s24 = 0;
+                double s28 = 0;
+                double s30 = 0;
+                double s36 = 0;
+                double s40 = 0;
+                double s44 = 0;
+                double s50 = 0;
+                double s52 = 0;
+                double s56 = 0;
+                double s60 = 0;
+                double s68 = 0;
+                double s70 = 0;
+                double s72 = 0;
+                double s76 = 0;
+                double s80 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g15[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g12[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g12[ix+i] * g0[iy+i] * g3[iz+i];
+                        s10 += g10[ix+i] * g5[iy+i] * g0[iz+i];
+                        s12 += g9[ix+i] * g6[iy+i] * g0[iz+i];
+                        s20 += g10[ix+i] * g0[iy+i] * g5[iz+i];
+                        s24 += g9[ix+i] * g0[iy+i] * g6[iz+i];
+                        s28 += g6[ix+i] * g9[iy+i] * g0[iz+i];
+                        s30 += g5[ix+i] * g10[iy+i] * g0[iz+i];
+                        s36 += g3[ix+i] * g12[iy+i] * g0[iz+i];
+                        s40 += g0[ix+i] * g15[iy+i] * g0[iz+i];
+                        s44 += g0[ix+i] * g12[iy+i] * g3[iz+i];
+                        s50 += g0[ix+i] * g10[iy+i] * g5[iz+i];
+                        s52 += g0[ix+i] * g9[iy+i] * g6[iz+i];
+                        s56 += g6[ix+i] * g0[iy+i] * g9[iz+i];
+                        s60 += g5[ix+i] * g0[iy+i] * g10[iz+i];
+                        s68 += g0[ix+i] * g6[iy+i] * g9[iz+i];
+                        s70 += g0[ix+i] * g5[iy+i] * g10[iz+i];
+                        s72 += g3[ix+i] * g0[iy+i] * g12[iz+i];
+                        s76 += g0[ix+i] * g3[iy+i] * g12[iz+i];
+                        s80 += g0[ix+i] * g0[iy+i] * g15[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n*4  ] = - s50 + s68 + s52 - s70;
+                        gout[n*4+1] = - s60 + s24 + s56 - s20;
+                        gout[n*4+2] = - s10 + s28 + s12 - s30;
+                        gout[n*4+3] = - s0 - s36 - s72 - s4 - s40 - s76 - s8 - s44 - s80;
+                } else {
+                        gout[n*4  ] += - s50 + s68 + s52 - s70;
+                        gout[n*4+1] += - s60 + s24 + s56 - s20;
+                        gout[n*4+2] += - s10 + s28 + s12 - s30;
+                        gout[n*4+3] += - s0 - s36 - s72 - s4 - s40 - s76 - s8 - s44 - s80;
+                }}}
+void int2e_gauge_r2_ps1sp2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {2, 1, 0, 2, 4, 1, 1, 4};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gauge_r2_ps1sp2_cart(double *out, int *dims, int *shls,
+                                        int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 1, 0, 2, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_ps1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r2_ps1sp2_sph(double *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 1, 0, 2, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_ps1sp2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r2_ps1sp2_spinor(double complex *out, int *dims, int *shls,
+                                          int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 1, 0, 2, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_ps1sp2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gauge_r2_ps1sp2);
+
+void CINTgout2e_int2e_gauge_r2_ps1ps2(double *gout,
+                                      double *g, int *idx, CINTEnvVars *envs, int gout_empty) {
+        int nf = envs->nf;
+        int nrys_roots = envs->nrys_roots;
+        int ix, iy, iz, i, n;
+        double *g0 = g;
+        double *g1 = g0 + envs->g_size * 3;
+        double *g2 = g1 + envs->g_size * 3;
+        double *g3 = g2 + envs->g_size * 3;
+        double *g4 = g3 + envs->g_size * 3;
+        double *g5 = g4 + envs->g_size * 3;
+        double *g6 = g5 + envs->g_size * 3;
+        double *g7 = g6 + envs->g_size * 3;
+        double *g8 = g7 + envs->g_size * 3;
+        double *g9 = g8 + envs->g_size * 3;
+        double *g10 = g9 + envs->g_size * 3;
+        double *g11 = g10 + envs->g_size * 3;
+        double *g12 = g11 + envs->g_size * 3;
+        double *g13 = g12 + envs->g_size * 3;
+        double *g14 = g13 + envs->g_size * 3;
+        double *g15 = g14 + envs->g_size * 3;
+        G2E_R0L(g1, g0, envs->i_l+2, envs->j_l+1, envs->k_l+1, envs->l_l+0);
+        G2E_D_K(g2, g0, envs->i_l+2, envs->j_l+1, envs->k_l+0, envs->l_l);
+        G2E_D_K(g3, g1, envs->i_l+2, envs->j_l+1, envs->k_l+0, envs->l_l);
+        G2E_D_J(g4, g0, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); G2E_D_I(g5, g0, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g4[ix] += g5[ix];}
+        G2E_D_J(g5, g1, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); G2E_D_I(g6, g1, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g5[ix] += g6[ix];}
+        G2E_D_J(g6, g2, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); G2E_D_I(g7, g2, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g6[ix] += g7[ix];}
+        G2E_D_J(g7, g3, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); G2E_D_I(g8, g3, envs->i_l+1, envs->j_l+0, envs->k_l, envs->l_l); for (ix = 0; ix < envs->g_size * 3; ix++) {g7[ix] += g8[ix];}
+        G2E_D_I(g9, g1, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g10, g2, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g12, g4, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        G2E_D_I(g15, g7, envs->i_l+0, envs->j_l, envs->k_l, envs->l_l);
+        for (n = 0; n < nf; n++) {
+                ix = idx[0+n*3];
+                iy = idx[1+n*3];
+                iz = idx[2+n*3];
+                double s0  = 0;
+                double s4  = 0;
+                double s8  = 0;
+                double s10 = 0;
+                double s12 = 0;
+                double s20 = 0;
+                double s24 = 0;
+                double s28 = 0;
+                double s30 = 0;
+                double s36 = 0;
+                double s40 = 0;
+                double s44 = 0;
+                double s50 = 0;
+                double s52 = 0;
+                double s56 = 0;
+                double s60 = 0;
+                double s68 = 0;
+                double s70 = 0;
+                double s72 = 0;
+                double s76 = 0;
+                double s80 = 0;
+                for (i = 0; i < nrys_roots; i++) {
+                        s0 += g15[ix+i] * g0[iy+i] * g0[iz+i];
+                        s4 += g12[ix+i] * g3[iy+i] * g0[iz+i];
+                        s8 += g12[ix+i] * g0[iy+i] * g3[iz+i];
+                        s10 += g10[ix+i] * g5[iy+i] * g0[iz+i];
+                        s12 += g9[ix+i] * g6[iy+i] * g0[iz+i];
+                        s20 += g10[ix+i] * g0[iy+i] * g5[iz+i];
+                        s24 += g9[ix+i] * g0[iy+i] * g6[iz+i];
+                        s28 += g6[ix+i] * g9[iy+i] * g0[iz+i];
+                        s30 += g5[ix+i] * g10[iy+i] * g0[iz+i];
+                        s36 += g3[ix+i] * g12[iy+i] * g0[iz+i];
+                        s40 += g0[ix+i] * g15[iy+i] * g0[iz+i];
+                        s44 += g0[ix+i] * g12[iy+i] * g3[iz+i];
+                        s50 += g0[ix+i] * g10[iy+i] * g5[iz+i];
+                        s52 += g0[ix+i] * g9[iy+i] * g6[iz+i];
+                        s56 += g6[ix+i] * g0[iy+i] * g9[iz+i];
+                        s60 += g5[ix+i] * g0[iy+i] * g10[iz+i];
+                        s68 += g0[ix+i] * g6[iy+i] * g9[iz+i];
+                        s70 += g0[ix+i] * g5[iy+i] * g10[iz+i];
+                        s72 += g3[ix+i] * g0[iy+i] * g12[iz+i];
+                        s76 += g0[ix+i] * g3[iy+i] * g12[iz+i];
+                        s80 += g0[ix+i] * g0[iy+i] * g15[iz+i];
+                }
+                if (gout_empty) {
+                        gout[n*4  ] = + s50 - s68 - s52 + s70;
+                        gout[n*4+1] = + s60 - s24 - s56 + s20;
+                        gout[n*4+2] = + s10 - s28 - s12 + s30;
+                        gout[n*4+3] = + s0 + s36 + s72 + s4 + s40 + s76 + s8 + s44 + s80;
+                } else {
+                        gout[n*4  ] += + s50 - s68 - s52 + s70;
+                        gout[n*4+1] += + s60 - s24 - s56 + s20;
+                        gout[n*4+2] += + s10 - s28 - s12 + s30;
+                        gout[n*4+3] += + s0 + s36 + s72 + s4 + s40 + s76 + s8 + s44 + s80;
+                }}}
+void int2e_gauge_r2_ps1ps2_optimizer(CINTOpt **opt, int *atm, int natm, int *bas, int nbas, double *env) {
+        int ng[] = {2, 1, 1, 1, 4, 1, 1, 4};
+        CINTall_2e_optimizer(opt, ng, atm, natm, bas, nbas, env);
+}
+CACHE_SIZE_T int2e_gauge_r2_ps1ps2_cart(double *out, int *dims, int *shls,
+                                        int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 1, 1, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_ps1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_cart_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r2_ps1ps2_sph(double *out, int *dims, int *shls,
+                                       int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 1, 1, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_ps1ps2;
+        envs.common_factor *= -1;
+        return CINT2e_drv(out, dims, &envs, opt, cache, &c2s_sph_2e1);
+}
+CACHE_SIZE_T int2e_gauge_r2_ps1ps2_spinor(double complex *out, int *dims, int *shls,
+                                          int *atm, int natm, int *bas, int nbas, double *env, CINTOpt *opt, double *cache) {
+        int ng[] = {2, 1, 1, 1, 4, 1, 1, 4};
+        CINTEnvVars envs;
+        CINTinit_int2e_EnvVars(&envs, ng, shls, atm, natm, bas, nbas, env);
+        envs.f_gout = &CINTgout2e_int2e_gauge_r2_ps1ps2;
+        return CINT2e_spinor_drv(out, dims, &envs, opt, cache, &c2s_si_2e1i, &c2s_si_2e2i);
+}
+ALL_CINT(int2e_gauge_r2_ps1ps2);
